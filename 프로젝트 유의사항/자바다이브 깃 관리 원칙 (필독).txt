깃관리 원칙

필독★
필독★
필독★
1. 
신규 기능 브랜치  
feat-" " 
ex:
feat-login

오류 수정 용도 사용 브랜치 
fix - " " 

ex: 
fix-login-error 


2 주기적으로 병합 (기능 일부라도 병합)
ex:
feat-payment 브랜치에서 
1주차	결제 UI 개발 완료	✅ feat 병합 
2주차	카드 결제 기능 개발 중	✅ feat 병합
3주차	결제 기능 완성 및 예약 기능 개발 시작	✅ feat 병합


📌 즉, 완벽하게 구현되지 않아도 어느 정도 개발이 진행되면 feat에 병합하는 것이 좋음.
📌 주기적으로 병합하면 충돌을 줄이고, 다른 개발자들과의 협업이 쉬워짐.
📌 최신코드가 필요할시 최근 feat만 pull로 가져올것 , 소스트리 기준에서  pull ->"가져오기 위한 원격 브랜치" feat
pull 하면 병합처리없이 pull처리됨. 


 현재 브랜치를 유지한 상태로 Pull 버튼 클릭
2️⃣ "가져오기 위한 원격 브랜치"를 feat으로 변경
3️⃣ "로컬 브랜치에서 가져오기"는 현재 브랜치 그대로 둠 (예: second 또는 feature-payment-reservation)
4️⃣ Pull 버튼 클릭하여 feat의 최신 코드 가져오기

✅ 이렇게 하면 feat 브랜치의 최신 코드가 현재 작업 중인 브랜치에 반영됨!
✅ 브랜치 이동 없이, feat 브랜치에서 최신 코드만 가져오는 방법!




예시 : 

feat-login 브랜치에서 로그인 기능 개발  -> 완료시 
feat에 병합처리  모으고 모아서 
최종 
main에 최종병합 



신규 기능브랜치에서 작업완료시 

main 브랜치 병합 

깃 기본지식은 공부필요함. 
 